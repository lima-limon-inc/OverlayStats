From 7f206dfa0c2ddc0981a6061ccf62b5427d0f18ed Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Benedikt=20B=C3=B6hm?= <bb@xnull.de>
Date: Tue, 30 Jul 2013 19:44:32 +0200
Subject: [PATCH 2/2] backport code from CHEF-867

---
 chef/lib/chef/client.rb               | 10 ++--
 chef/lib/chef/config.rb               |  9 ++++
 chef/lib/chef/run_lock.rb             | 61 ++++++++++++++++++++++++
 chef/spec/functional/run_lock_spec.rb | 88 +++++++++++++++++++++++++++++++++++
 chef/spec/unit/client_spec.rb         |  3 ++
 chef/spec/unit/run_lock_spec.rb       | 37 +++++++++++++++
 6 files changed, 205 insertions(+), 3 deletions(-)
 create mode 100644 chef/lib/chef/run_lock.rb
 create mode 100644 chef/spec/functional/run_lock_spec.rb
 create mode 100644 chef/spec/unit/run_lock_spec.rb

diff --git a/chef/lib/chef/client.rb b/chef/lib/chef/client.rb
index 7723ae9..843d2ec 100644
--- a/chef/lib/chef/client.rb
+++ b/chef/lib/chef/client.rb
@@ -41,6 +41,7 @@ require 'chef/formatters/doc'
 require 'chef/formatters/minimal'
 require 'chef/version'
 require 'chef/resource_reporter'
+require 'chef/run_lock'
 require 'ohai'
 require 'rbconfig'
 
@@ -378,7 +379,7 @@ class Chef
       runner.converge
       @events.converge_complete
       true
-    rescue Exception => e
+    rescue Exception
       # TODO: should this be a separate #converge_failed(exception) method?
       @events.converge_complete
       raise
@@ -397,8 +398,10 @@ class Chef
     # === Returns
     # true:: Always returns true.
     def do_run
-      run_context = nil
+      runlock = RunLock.new(Chef::Config)
+      runlock.acquire
 
+      run_context = nil
       @events.run_start(Chef::VERSION)
       Chef::Log.info("*** Chef #{Chef::VERSION} ***")
       enforce_path_sanity
@@ -438,8 +441,9 @@ class Chef
         @events.run_failed(e)
         raise
       ensure
-        run_status = nil
+        @run_status = nil
         run_context = nil
+        runlock.release
         GC.start
       end
       true
diff --git a/chef/lib/chef/config.rb b/chef/lib/chef/config.rb
index 702aa04..ea46a36 100644
--- a/chef/lib/chef/config.rb
+++ b/chef/lib/chef/config.rb
@@ -158,6 +158,15 @@ class Chef
     # Where chef's cache files should be stored
     file_cache_path platform_specific_path("/var/chef/cache")
 
+    # By default, chef-client (or solo) creates a lockfile in
+    # `file_cache_path`/chef-client-running.pid
+    # If `lockfile` is explicitly set, this path will be used instead.
+    #
+    # If your `file_cache_path` resides on a NFS (or non-flock()-supporting
+    # fs), it's recommended to set this to something like
+    # '/tmp/chef-client-running.pid'
+    lockfile nil
+
     # Where backups of chef-managed files should go
     file_backup_path platform_specific_path("/var/chef/backup")
 
diff --git a/chef/lib/chef/run_lock.rb b/chef/lib/chef/run_lock.rb
new file mode 100644
index 0000000..02d164c
--- /dev/null
+++ b/chef/lib/chef/run_lock.rb
@@ -0,0 +1,61 @@
+#
+# Author:: Daniel DeLeo (<dan@opscode.com>)
+# Copyright:: Copyright (c) 2012 Opscode, Inc.
+# License:: Apache License, Version 2.0
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+class Chef
+  class RunLock
+    attr_reader :runlock
+    attr_reader :runlock_file
+
+    def initialize(config)
+      @runlock_file = config[:lockfile] || "#{config[:file_cache_path]}/chef-client-running.pid"
+      @runlock = nil
+    end
+
+    def acquire
+      @runlock = File.open(runlock_file,'w+')
+      unless runlock.flock(File::LOCK_EX|File::LOCK_NB)
+        # Another chef client running...
+        runpid = runlock.read.strip.chomp
+        Chef::Log.info("Chef client #{runpid} is running, will wait for it to finish and then run.")
+        runlock.flock(File::LOCK_EX)
+      end
+      # We grabbed the run lock.  Save the pid.
+      runlock.truncate(0)
+      runlock.rewind # truncate doesn't reset position to 0.
+      runlock.write(Process.pid.to_s)
+    end
+
+    def release
+      if runlock
+        runlock.flock(File::LOCK_UN)
+        runlock.close
+        # Don't unlink the pid file, if another chef-client was waiting, it
+        # won't be recreated. Better to leave a "dead" pid file than not have
+        # it available if you need to break the lock.
+        reset
+      end
+    end
+
+    private
+
+    def reset
+      @runlock = nil
+    end
+
+  end
+end
+
diff --git a/chef/spec/functional/run_lock_spec.rb b/chef/spec/functional/run_lock_spec.rb
new file mode 100644
index 0000000..9ef409a
--- /dev/null
+++ b/chef/spec/functional/run_lock_spec.rb
@@ -0,0 +1,88 @@
+#
+# Author:: Daniel DeLeo (<dan@opscode.com>)
+# Copyright:: Copyright (c) 2012 Opscode, Inc.
+# License:: Apache License, Version 2.0
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+require File.expand_path('../../spec_helper', __FILE__)
+require 'chef/client'
+
+describe Chef::RunLock do
+
+  # This behavior is believed to work on windows, but the tests use UNIX APIs.
+  describe "when locking the chef-client run", :unix_only => true do
+    it "allows only one chef client run per lockfile" do
+      read, write = IO.pipe
+      run_lock = Chef::RunLock.new(:file_cache_path => "/var/chef/cache", :lockfile => "/tmp/chef-client-running.pid")
+      p1 = fork do
+        run_lock.acquire
+        write.puts 1
+        #puts "[#{Time.new.to_i % 100}] p1 (#{Process.pid}) running with lock"
+        sleep 2
+        write.puts 2
+        #puts "[#{Time.new.to_i % 100}] p1 (#{Process.pid}) releasing lock"
+        run_lock.release
+      end
+
+      p2 = fork do
+        run_lock.acquire
+        write.puts 3
+        #puts "[#{Time.new.to_i % 100}] p2 (#{Process.pid}) running with lock"
+        run_lock.release
+      end
+
+      Process.waitpid2(p1)
+      Process.waitpid2(p2)
+
+      write.close
+      order = read.read
+      read.close
+
+      order.should == "1\n2\n3\n"
+    end
+
+    it "clears the lock if the process dies unexpectedly" do
+      read, write = IO.pipe
+      run_lock = Chef::RunLock.new(:file_cache_path => "/var/chef/cache", :lockfile => "/tmp/chef-client-running.pid")
+      p1 = fork do
+        run_lock.acquire
+        write.puts 1
+        #puts "[#{Time.new.to_i % 100}] p1 (#{Process.pid}) running with lock"
+        sleep 1
+        write.puts 2
+        #puts "[#{Time.new.to_i % 100}] p1 (#{Process.pid}) releasing lock"
+        run_lock.release
+      end
+
+      p2 = fork do
+        run_lock.acquire
+        write.puts 3
+        #puts "[#{Time.new.to_i % 100}] p2 (#{Process.pid}) running with lock"
+        run_lock.release
+      end
+      Process.kill(:KILL, p1)
+
+      Process.waitpid2(p1)
+      Process.waitpid2(p2)
+
+      write.close
+      order = read.read
+      read.close
+
+      order.should =~ /3\Z/
+    end
+  end
+
+end
+
diff --git a/chef/spec/unit/client_spec.rb b/chef/spec/unit/client_spec.rb
index 6433808..0ebde14 100644
--- a/chef/spec/unit/client_spec.rb
+++ b/chef/spec/unit/client_spec.rb
@@ -124,6 +124,9 @@ shared_examples_for Chef::Client do
       Chef::REST.should_receive(:new).with(Chef::Config[:chef_server_url]).and_return(mock_chef_rest_for_node_save)
       mock_chef_rest_for_node_save.should_receive(:put_rest).with("nodes/#{@fqdn}", @node).and_return(true)
 
+      Chef::RunLock.any_instance.should_receive(:acquire)
+      Chef::RunLock.any_instance.should_receive(:release)
+
       # Post conditions: check that node has been filled in correctly
       @client.should_receive(:run_started)
       @client.should_receive(:run_completed_successfully)
diff --git a/chef/spec/unit/run_lock_spec.rb b/chef/spec/unit/run_lock_spec.rb
new file mode 100644
index 0000000..4e62b11
--- /dev/null
+++ b/chef/spec/unit/run_lock_spec.rb
@@ -0,0 +1,37 @@
+#
+# Author:: Daniel DeLeo (<dan@opscode.com>)
+# Copyright:: Copyright (c) 2012 Opscode, Inc.
+# License:: Apache License, Version 2.0
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+require File.expand_path('../../spec_helper', __FILE__)
+require 'chef/client'
+
+describe Chef::RunLock do
+
+  describe "when first created" do
+    it "locates the lockfile in the file cache path by default" do
+      run_lock = Chef::RunLock.new(:file_cache_path => "/var/chef/cache", :lockfile => nil)
+      run_lock.runlock_file.should == "/var/chef/cache/chef-client-running.pid"
+    end
+
+    it "locates the lockfile in the user-configured path when set" do
+      run_lock = Chef::RunLock.new(:file_cache_path => "/var/chef/cache", :lockfile => "/tmp/chef-client-running.pid")
+      run_lock.runlock_file.should == "/tmp/chef-client-running.pid"
+    end
+  end
+
+  # See also: spec/functional/run_lock_spec
+
+end
-- 
1.8.1.5

