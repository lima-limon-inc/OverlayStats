diff -Naur greeter-6.1.1.orig/compositor/BackgroundUtils.vala greeter-6.1.1/compositor/BackgroundUtils.vala
--- greeter-6.1.1.orig/compositor/BackgroundUtils.vala	2023-05-04 11:01:05.270062035 +0200
+++ greeter-6.1.1/compositor/BackgroundUtils.vala	2023-05-04 11:31:36.310193066 +0200
@@ -28,13 +28,8 @@
 
     private class DummyOffscreenEffect : Clutter.OffscreenEffect {
         public signal void done_painting ();
-#if HAS_MUTTER40
         public override void post_paint (Clutter.PaintNode node, Clutter.PaintContext context) {
             base.post_paint (node, context);
-#else
-        public override void post_paint (Clutter.PaintContext context) {
-            base.post_paint (context);
-#endif
             Idle.add (() => {
                 done_painting ();
                 return false;
diff -Naur greeter-6.1.1.orig/compositor/DBusAccelerator.vala greeter-6.1.1/compositor/DBusAccelerator.vala
--- greeter-6.1.1.orig/compositor/DBusAccelerator.vala	2023-05-04 11:01:05.270062035 +0200
+++ greeter-6.1.1/compositor/DBusAccelerator.vala	2023-05-04 11:31:45.566860382 +0200
@@ -84,9 +84,6 @@
                 if (accel.action == action) {
                     if (ActionMode.LOGIN_SCREEN in accel.flags) {
                         var parameters = new GLib.HashTable<string, Variant> (null, null);
-#if !HAS_MUTTER40
-                        parameters.set ("device-id", new Variant.uint32 (device.id));
-#endif
                         parameters.set ("timestamp", new Variant.uint32 (timestamp));
                         if (device.device_node != null) {
                             parameters.set ("device-node", new Variant.string (device.device_node));
diff -Naur greeter-6.1.1.orig/compositor/Dialogs.vala greeter-6.1.1/compositor/Dialogs.vala
--- greeter-6.1.1.orig/compositor/Dialogs.vala	2023-05-04 11:01:05.270062035 +0200
+++ greeter-6.1.1/compositor/Dialogs.vala	2023-05-04 11:32:45.223531272 +0200
@@ -1,11 +1,12 @@
 /*
- * Copyright 2021 elementary, Inc. (https://elementary.io)
+ * Copyright 2021-2023 elementary, Inc. (https://elementary.io)
  * SPDX-License-Identifier: GPL-3.0-or-later
  */
 
  namespace GreeterCompositor {
     [DBus (name = "org.freedesktop.impl.portal.Access")]
     public interface AccessPortal : Object {
+        [DBus (timeout = 2147483647)] // timeout = int.MAX; value got from <limits.h>
         public abstract async void access_dialog (
             ObjectPath request_path,
             string app_id,
@@ -24,6 +25,8 @@
     }
 
     public class AccessDialog : Object {
+        public signal void response (uint response);
+
         public Meta.Window parent { owned get; construct set; }
 
         public string title { get; construct; }
@@ -32,8 +35,6 @@
         public string accept_label { get; set; }
         public string deny_label { get; set; }
 
-        public signal void response (uint response);
-
         const string PANTHEON_PORTAL_NAME = "org.freedesktop.impl.portal.desktop.pantheon";
         const string FDO_PORTAL_PATH = "/org/freedesktop/portal/desktop";
         const string GALA_DIALOG_PATH = "/io/elementary/gala/dialog";
@@ -60,6 +61,7 @@
             Object (title: title, body: body, icon: icon);
         }
 
+        [Signal (run = "first")]
         public virtual signal void show () {
             if (portal == null) {
                 return;
@@ -83,34 +85,32 @@
             options["deny_label"] = deny_label;
             options["icon"] = icon;
 
-            portal.access_dialog.begin (path, app_id, parent_handler, title, body, "", options, on_response);
-        }
+            portal.access_dialog.begin (path, app_id, parent_handler, title, body, "", options, (obj, res) => {
+                uint ret;
 
-        public void close () {
-            if (path != null) {
                 try {
-                    Request request = Bus.get_proxy_sync (BusType.SESSION, PANTHEON_PORTAL_NAME, path);
-                    request.close ();
+                    portal.access_dialog.end (res, out ret);
                 } catch (Error e) {
                     warning (e.message);
+                    ret = 2;
                 }
 
+                on_response (ret);
                 path = null;
-            }
+            });
         }
 
-        protected virtual void on_response (Object? obj, AsyncResult? res) {
-            uint ret;
-
+        public void close () {
             try {
-                portal.access_dialog.end (res, out ret);
+                Bus.get_proxy_sync<Request> (BusType.SESSION, PANTHEON_PORTAL_NAME, path).close ();
+                path = null;
             } catch (Error e) {
                 warning (e.message);
-                ret = 2;
             }
+        }
 
-            response (ret);
-            close ();
+        protected virtual void on_response (uint response_id) {
+            response (response_id);
         }
     }
 }
diff -Naur greeter-6.1.1.orig/compositor/KeyboardManager.vala greeter-6.1.1/compositor/KeyboardManager.vala
--- greeter-6.1.1.orig/compositor/KeyboardManager.vala	2023-05-04 11:01:05.270062035 +0200
+++ greeter-6.1.1/compositor/KeyboardManager.vala	2023-05-04 11:33:11.086866418 +0200
@@ -1,113 +1,104 @@
-//
-//  Copyright (C) 2016 Santiago León
-//
-//  This program is free software: you can redistribute it and/or modify
-//  it under the terms of the GNU General Public License as published by
-//  the Free Software Foundation, either version 3 of the License, or
-//  (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//
-//  You should have received a copy of the GNU General Public License
-//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
-//
-
-namespace GreeterCompositor {
-    public class KeyboardManager : Object {
-        static KeyboardManager? instance;
-        static VariantType sources_variant_type;
+/*
+ * Copyright 2016 Santiago León
+ * Copyright 2023 elementary, Inc. <https://elementary.io>
+ * SPDX-License-Identifier: GPL-3.0-or-later
+ */
 
-        public static void init (Meta.Display display) {
-            if (instance != null)
-                return;
+public class GreeterCompositor.KeyboardManager : Object {
+    private static KeyboardManager? instance;
+    private static VariantType sources_variant_type;
+    private static GLib.Settings settings;
 
-            instance = new KeyboardManager ();
+    public unowned Meta.Display display { construct; private get; }
 
-            display.modifiers_accelerator_activated.connect (instance.handle_modifiers_accelerator_activated);
+    public static void init (Meta.Display display) {
+        if (instance != null) {
+            return;
         }
 
-        static construct {
-            sources_variant_type = new VariantType ("a(ss)");
-        }
+        instance = new KeyboardManager (display);
+
+        display.modifiers_accelerator_activated.connect ((display) => KeyboardManager.handle_modifiers_accelerator_activated (display, false));
+    }
 
-        GLib.Settings settings;
+    static construct {
+        sources_variant_type = new VariantType ("a(ss)");
 
-        KeyboardManager () {
-            Object ();
+        var schema = GLib.SettingsSchemaSource.get_default ().lookup ("org.gnome.desktop.input-sources", true);
+        if (schema == null) {
+            critical ("org.gnome.desktop.input-sources not found.");
         }
 
-        construct {
-            var schema = GLib.SettingsSchemaSource.get_default ().lookup ("org.gnome.desktop.input-sources", true);
-            if (schema == null)
-                return;
+        settings = new GLib.Settings.full (schema, null, null);
+    }
 
-            settings = new GLib.Settings.full (schema, null, null);
-            Signal.connect (settings, "changed", (Callback) set_keyboard_layout, this);
+    construct {
+        settings.changed.connect (set_keyboard_layout);
 
-            set_keyboard_layout (settings, "current");
-        }
-
-        [CCode (instance_pos = -1)]
-        bool handle_modifiers_accelerator_activated (Meta.Display display) {
-            display.ungrab_keyboard (display.get_current_time ());
+        set_keyboard_layout (settings, "sources"); // Update the list of layouts
+        set_keyboard_layout (settings, "current"); // Set current layout
+    }
 
-            var sources = settings.get_value ("sources");
-            if (!sources.is_of_type (sources_variant_type))
-                return true;
+    private KeyboardManager (Meta.Display display) {
+        Object (display: display);
+    }
 
-            var n_sources = (uint) sources.n_children ();
-            if (n_sources < 2)
-                return true;
+    [CCode (instance_pos = -1)]
+    public static bool handle_modifiers_accelerator_activated (Meta.Display display, bool backward) {
+        display.ungrab_keyboard (display.get_current_time ());
 
-            var current = settings.get_uint ("current");
-            settings.set_uint ("current", (current + 1) % n_sources);
+        var sources = settings.get_value ("sources");
+        if (!sources.is_of_type (sources_variant_type)) {
+            return true;
+        }
 
+        var n_sources = (uint) sources.n_children ();
+        if (n_sources < 2) {
             return true;
         }
 
-        [CCode (instance_pos = -1)]
-        void set_keyboard_layout (GLib.Settings settings, string key) {
-            if (!(key == "current" || key == "sources" || key == "xkb-options"))
-                return;
+        var current = settings.get_uint ("current");
 
-            string layout = "us", variant = "", options = "";
+        if (!backward) {
+            settings.set_uint ("current", (current + 1) % n_sources);
+        } else {
+            settings.set_uint ("current", (current - 1) % n_sources);
+        }
 
-            var sources = settings.get_value ("sources");
-            if (!sources.is_of_type (sources_variant_type))
-                return;
+        return true;
+    }
+
+    [CCode (instance_pos = -1)]
+    private void set_keyboard_layout (GLib.Settings settings, string key) {
+        if (key == "sources" || key == "xkb-options") {
+            string[] layouts = {}, variants = {};
 
-            // If GSettings doesn't have any keyboard layouts, don't set one
-            // and leave the system default
-            if (sources.n_children () == 0) {
+            var sources = settings.get_value ("sources");
+            if (!sources.is_of_type (sources_variant_type)) {
                 return;
             }
 
-            var current = settings.get_uint ("current");
-            unowned string? type = null, name = null;
-            if (sources.n_children () > current)
-                sources.get_child (current, "(&s&s)", out type, out name);
-            if (type == "xkb") {
-                string[] arr = name.split ("+", 2);
-                layout = arr[0];
-                variant = arr[1] ?? "";
-            } else {
-                return;  //We do not want to change the current xkb layout here when using ibus.
+            for (int i = 0; i < sources.n_children (); i++) {
+                unowned string? type = null, name = null;
+                sources.get_child (i, "(&s&s)", out type, out name);
+
+                if (type == "xkb") {
+                    string[] arr = name.split ("+", 2);
+                    layouts += arr[0];
+                    variants += arr[1] ?? "";
+
+                }
             }
 
             var xkb_options = settings.get_strv ("xkb-options");
-            if (xkb_options.length > 0)
-                options = string.joinv (",", xkb_options);
-
-            // Needed to make common keybindings work on non-latin layouts
-            if (layout != "us" || variant != "") {
-                layout = layout + ",us";
-                variant = variant + ",";
-            }
 
-            Meta.Backend.get_backend ().set_keymap (layout, variant, options);
+            var layout = string.joinv (",", layouts);
+            var variant = string.joinv (",", variants);
+            var options = string.joinv (",", xkb_options);
+
+            display.get_context ().get_backend ().set_keymap (layout, variant, options);
+        } else if (key == "current") {
+            display.get_context ().get_backend ().lock_layout_group (settings.get_uint ("current"));
         }
     }
 }
diff -Naur greeter-6.1.1.orig/compositor/main.vala greeter-6.1.1/compositor/main.vala
--- greeter-6.1.1.orig/compositor/main.vala	2023-05-04 11:01:05.270062035 +0200
+++ greeter-6.1.1/compositor/main.vala	2023-05-04 11:35:07.810207940 +0200
@@ -28,8 +28,6 @@
     }
 
     public static int main (string[] args) {
-
-#if HAS_MUTTER41
         var ctx = new Meta.Context ("Mutter(GreeterCompositor)");
         ctx.add_option_entries (GreeterCompositor.OPTIONS, Constants.GETTEXT_PACKAGE);
         try {
@@ -40,43 +38,15 @@
         }
 
         ctx.set_plugin_gtype (typeof (GreeterCompositor.WindowManager));
-#else
-        unowned OptionContext ctx = Meta.get_option_context ();
-        ctx.add_main_entries (GreeterCompositor.OPTIONS, null);
-        try {
-            ctx.parse (ref args);
-        } catch (Error e) {
-            stderr.printf ("Error initializing: %s\n", e.message);
-            Meta.exit (Meta.ExitCode.ERROR);
-        }
-
-        Meta.Plugin.manager_set_plugin_type (typeof (GreeterCompositor.WindowManager));
-
-        Meta.Util.set_wm_name ("Mutter(GreeterCompositor)");
-#endif
-
 
-#if HAS_MUTTER41
         try {
             ctx.setup ();
         } catch (Error e) {
             stderr.printf ("Failed to setup: %s\n", e.message);
             return Posix.EXIT_FAILURE;
         }
-#else
-        /**
-         * Prevent Meta.init () from causing gtk to load gail and at-bridge
-         * Taken from Gnome-Shell main.c
-         */
-        GLib.Environment.set_variable ("NO_GAIL", "1", true);
-        GLib.Environment.set_variable ("NO_AT_BRIDGE", "1", true);
-        Meta.init ();
-        GLib.Environment.unset_variable ("NO_GAIL");
-        GLib.Environment.unset_variable ("NO_AT_BRIDGE");
-#endif
 
         typeof (GreeterCompositor.Utils).class_ref ();
-#if HAS_MUTTER41
         try {
             ctx.start ();
         } catch (Error e) {
@@ -92,8 +62,5 @@
         }
 
         return Posix.EXIT_SUCCESS;
-#else
-        return Meta.run ();
-#endif
     }
 }
diff -Naur greeter-6.1.1.orig/compositor/meson.build greeter-6.1.1/compositor/meson.build
--- greeter-6.1.1.orig/compositor/meson.build	2023-05-04 11:01:05.270062035 +0200
+++ greeter-6.1.1/compositor/meson.build	2023-05-04 11:09:26.730097126 +0200
@@ -14,50 +14,6 @@
 compositor_c_args =['-DCLUTTER_ENABLE_COMPOSITOR_API', '-DCLUTTER_ENABLE_EXPERIMENTAL_API',
 		'-DCOGL_ENABLE_EXPERIMENTAL_API', '-DCOGL_ENABLE_EXPERIMENTAL_2_0_API']
 
-mutter336_dep = dependency('libmutter-6', version: ['>= 3.35.1', '< 3.37'], required: false)
-if mutter336_dep.found()
-	libmutter_dep = dependency('libmutter-6', version: '>= 3.35.1')
-	mutter_dep = [
-	    libmutter_dep,
-		dependency('mutter-cogl-6'), dependency('mutter-cogl-pango-6'),
-		dependency('mutter-cogl-path-6'), dependency('mutter-clutter-6')
-	]
-	vala_flags = []
-endif
-
-mutter338_dep = dependency('libmutter-7', version: ['>= 3.37', '< 3.39'], required: false)
-if mutter338_dep.found()
-	libmutter_dep = dependency('libmutter-7', version: '>= 3.37')
-	mutter_dep = [
-	    libmutter_dep,
-		dependency('mutter-cogl-7'), dependency('mutter-cogl-pango-7'),
-		dependency('mutter-clutter-7')
-	]
-	vala_flags = ['--define', 'HAS_MUTTER338']
-endif
-
-mutter40_dep = dependency('libmutter-8', version: ['>= 40', '< 41'], required: false)
-if mutter40_dep.found()
-	libmutter_dep = dependency('libmutter-8', version: '>= 40')
-	mutter_dep = [
-		libmutter_dep,
-		dependency('mutter-cogl-8'), dependency('mutter-cogl-pango-8'),
-		dependency('mutter-clutter-8')
-	]
-	vala_flags = ['--define', 'HAS_MUTTER338', '--define', 'HAS_MUTTER40']
-endif
-
-mutter41_dep = dependency('libmutter-9', version: ['>= 41', '< 42'], required: false)
-if mutter41_dep.found()
-	libmutter_dep = dependency('libmutter-9', version: '>= 41')
-	mutter_dep = [
-		libmutter_dep,
-		dependency('mutter-cogl-9'), dependency('mutter-cogl-pango-9'),
-		dependency('mutter-clutter-9')
-	]
-	vala_flags = ['--define', 'HAS_MUTTER338', '--define', 'HAS_MUTTER40', '--define', 'HAS_MUTTER41']
-endif
-
 mutter42_dep = dependency('libmutter-10', version: ['>= 42', '< 43'], required: false)
 if mutter42_dep.found()
 	libmutter_dep = dependency('libmutter-10', version: '>= 42')
@@ -66,7 +22,6 @@
 		dependency('mutter-cogl-10'), dependency('mutter-cogl-pango-10'),
 		dependency('mutter-clutter-10')
 	]
-	vala_flags = ['--define', 'HAS_MUTTER338', '--define', 'HAS_MUTTER40', '--define', 'HAS_MUTTER41', '--define', 'HAS_MUTTER42']
 endif
 
 mutter43_dep = dependency('libmutter-11', version: ['>= 43', '< 44'], required: false)
@@ -77,7 +32,18 @@
 		dependency('mutter-cogl-11'), dependency('mutter-cogl-pango-11'),
 		dependency('mutter-clutter-11')
 	]
-	vala_flags = ['--define', 'HAS_MUTTER338', '--define', 'HAS_MUTTER40', '--define', 'HAS_MUTTER41', '--define', 'HAS_MUTTER42', '--define', 'HAS_MUTTER43']
+	vala_flags = ['--define', 'HAS_MUTTER43']
+endif
+
+mutter44_dep = dependency('libmutter-12', version: ['>= 44', '< 45'], required: false)
+if mutter44_dep.found()
+	libmutter_dep = dependency('libmutter-12', version: '>= 44')
+	mutter_dep = [
+		libmutter_dep,
+		dependency('mutter-cogl-12'), dependency('mutter-cogl-pango-12'),
+		dependency('mutter-clutter-12')
+	]
+	vala_flags = ['--define', 'HAS_MUTTER43', '--define', 'HAS_MUTTER44']
 endif
 
 if mutter_dep.length() == 0
diff -Naur greeter-6.1.1.orig/compositor/SystemBackground.vala greeter-6.1.1/compositor/SystemBackground.vala
--- greeter-6.1.1.orig/compositor/SystemBackground.vala	2023-05-04 11:01:05.270062035 +0200
+++ greeter-6.1.1/compositor/SystemBackground.vala	2023-05-04 11:33:31.013534514 +0200
@@ -40,11 +40,7 @@
             system_background.set_file (texture_file, GDesktop.BackgroundStyle.WALLPAPER);
         }
 
-#if HAS_MUTTER338
         ((Meta.BackgroundContent)background_actor.content).background = system_background;
-#else
-        background_actor.background = system_background;
-#endif
     }
 
     public void refresh () {
diff -Naur greeter-6.1.1.orig/compositor/Utils.vala greeter-6.1.1/compositor/Utils.vala
--- greeter-6.1.1.orig/compositor/Utils.vala	2023-05-04 11:01:05.270062035 +0200
+++ greeter-6.1.1/compositor/Utils.vala	2023-05-04 11:33:48.730202443 +0200
@@ -75,24 +75,6 @@
         }
 
         /**
-         * Get the next window that should be active on a workspace right now. Based on
-         * stacking order
-         *
-         * @param workspace The workspace on which to find the window
-         * @param backward  Whether to get the previous one instead
-         */
-        public static Meta.Window get_next_window (Meta.Workspace workspace, bool backward = false) {
-            var display = workspace.get_display ();
-            var window = display.get_tab_next (Meta.TabList.NORMAL, workspace, null, backward);
-
-            if (window == null) {
-                window = display.get_tab_current (Meta.TabList.NORMAL, workspace);
-            }
-
-            return window;
-        }
-
-        /**
          * Get the number of toplevel windows on a workspace excluding those that are
          * on all workspaces
          *
@@ -112,65 +94,5 @@
             }
             return n;
         }
-
-        /**
-         * Creates an actor showing the current contents of the given WindowActor.
-         *
-         * @param actor      The actor from which to create a shnapshot
-         * @param inner_rect The inner (actually visible) rectangle of the window
-         * @param outer_rect The outer (input region) rectangle of the window
-         *
-         * @return           A copy of the actor at that time or %NULL
-         */
-        public static Clutter.Actor? get_window_actor_snapshot (
-            Meta.WindowActor actor,
-            Meta.Rectangle inner_rect,
-            Meta.Rectangle outer_rect
-        ) {
-            var texture = actor.get_texture () as Meta.ShapedTexture;
-
-            if (texture == null) {
-                return null;
-            }
-
-            var surface = texture.get_image ({
-                inner_rect.x - outer_rect.x,
-                inner_rect.y - outer_rect.y,
-                inner_rect.width,
-                inner_rect.height
-            });
-
-            if (surface == null) {
-                return null;
-            }
-
-            var canvas = new Clutter.Canvas ();
-            var handler = canvas.draw.connect ((cr) => {
-                cr.set_source_surface (surface, 0, 0);
-                cr.paint ();
-                return false;
-            });
-            canvas.set_size (inner_rect.width, inner_rect.height);
-            SignalHandler.disconnect (canvas, handler);
-
-            var container = new Clutter.Actor ();
-            container.set_size (inner_rect.width, inner_rect.height);
-            container.content = canvas;
-
-            return container;
-        }
-        /**
-        * Ring the system bell, will most likely emit a <beep> error sound or, if the
-        * audible bell is disabled, flash the display
-        *
-        * @param display The display to flash, if necessary
-        */
-        public static void bell (Meta.Display display) {
-            if (Meta.Prefs.bell_is_audible ()) {
-                Gdk.beep ();
-            } else {
-                display.get_compositor ().flash_display (display);
-            }
-        }
     }
 }
diff -Naur greeter-6.1.1.orig/compositor/WindowManager.vala greeter-6.1.1/compositor/WindowManager.vala
--- greeter-6.1.1.orig/compositor/WindowManager.vala	2023-05-04 11:01:05.270062035 +0200
+++ greeter-6.1.1/compositor/WindowManager.vala	2023-05-04 11:34:45.500206369 +0200
@@ -21,11 +21,6 @@
 namespace GreeterCompositor {
 
     public class WindowManager : Meta.Plugin {
-        const uint GL_VENDOR = 0x1F00;
-        const string LOGIND_DBUS_NAME = "org.freedesktop.login1";
-        const string LOGIND_DBUS_OBJECT_PATH = "/org/freedesktop/login1";
-
-        delegate unowned string? GlQueryFunc (uint id);
 
         /**
          * {@inheritDoc}
@@ -47,11 +42,6 @@
          */
         public Clutter.Actor top_window_group { get; protected set; }
 
-        /**
-         * {@inheritDoc}
-         */
-        public Meta.BackgroundGroup background_group { get; protected set; }
-
         public Greeter.SystemBackground system_background { get; private set; }
 
         Meta.PluginInfo info;
@@ -62,8 +52,6 @@
 
         //ScreenSaver? screensaver;
 
-        Window? moving; //place for the window that is being moved over
-
         //Gee.LinkedList<ModalProxy> modal_stack = new Gee.LinkedList<ModalProxy> ();
 
         Gee.HashSet<Meta.WindowActor> minimizing = new Gee.HashSet<Meta.WindowActor> ();
@@ -158,11 +146,7 @@
 
             Idle.add (() => {
                 // let the session manager move to the next phase
-#if HAS_MUTTER41
                 display.get_context ().notify_ready ();
-#else
-                Meta.register_with_session ();
-#endif
                 return GLib.Source.REMOVE;
             });
         }
@@ -181,37 +165,6 @@
             return list.to_array ();
         }
 
-        /**
-         * {@inheritDoc}
-         */
-        public void move_window (Window? window, MotionDirection direction) {
-            if (window == null)
-                return;
-
-            unowned Meta.Display display = get_display ();
-            unowned Meta.WorkspaceManager manager = display.get_workspace_manager ();
-
-            var active = manager.get_active_workspace ();
-            var next = active.get_neighbor (direction);
-
-            //dont allow empty workspaces to be created by moving, if we have dynamic workspaces
-            if (Prefs.get_dynamic_workspaces () && Utils.get_n_windows (active) == 1 && next.index () == manager.n_workspaces - 1) {
-                Utils.bell (display);
-                return;
-            }
-
-            moving = window;
-
-            if (!window.is_on_all_workspaces ())
-                window.change_workspace (next);
-
-            next.activate_with_focus (window, display.get_current_time ());
-        }
-
-        public void get_current_cursor_position (out int x, out int y) {
-            Gdk.Display.get_default ().get_default_seat ().get_pointer ().get_position (null, out x, out y);
-        }
-
         public override void show_window_menu_for_rect (Meta.Window window, Meta.WindowMenuType menu, Meta.Rectangle rect) {
             show_window_menu (window, menu, rect.x, rect.y);
         }
@@ -277,6 +230,7 @@
 
                 switch (which_change) {
                     case Meta.SizeChange.MAXIMIZE:
+                    case Meta.SizeChange.UNMAXIMIZE:
                         break;
                     case Meta.SizeChange.FULLSCREEN:
                     case Meta.SizeChange.UNFULLSCREEN:
@@ -351,81 +305,29 @@
             end_animation (ref maximizing, actor);
         }
 
-        /*workspace switcher*/
-        List<Clutter.Actor>? windows;
-        List<Clutter.Actor>? parents;
-        List<Clutter.Actor>? tmp_actors;
-
         public override void switch_workspace (int from, int to, MotionDirection direction) {
             switch_workspace_completed ();
             return;
         }
 
-        void end_switch_workspace () {
-            if (windows == null || parents == null)
-                return;
-
-            unowned Meta.Display display = get_display ();
-            var active_workspace = display.get_workspace_manager ().get_active_workspace ();
-
-            for (var i = 0; i < windows.length (); i++) {
-                var actor = windows.nth_data (i);
-                actor.set_translation (0.0f, 0.0f, 0.0f);
-
-                if (actor is Meta.BackgroundGroup) {
-                    actor.x = 0;
-                    // thankfully mutter will take care of stacking it at the right place for us
-                    clutter_actor_reparent (actor, window_group);
-                    continue;
-                }
-
-                var window = actor as WindowActor;
-
-                if (window == null || !window.is_destroyed ())
-                    clutter_actor_reparent (actor, parents.nth_data (i));
-
-                if (window == null || window.is_destroyed ())
-                    continue;
-
-                kill_window_effects (window);
-
-                var meta_window = window.get_meta_window ();
-                if (meta_window.get_workspace () != active_workspace
-                    && !meta_window.is_on_all_workspaces ())
-                    window.hide ();
-
-                // some static windows may have been faded out
-                if (actor.opacity < 255U) {
-                    actor.save_easing_state ();
-                    actor.set_easing_duration (300);
-                    actor.opacity = 255U;
-                    actor.restore_easing_state ();
-                }
-            }
-
-            if (tmp_actors != null) {
-                foreach (var actor in tmp_actors) {
-                    actor.destroy ();
-                }
-
-                tmp_actors = null;
-            }
-
-            windows = null;
-            parents = null;
-            moving = null;
-
-            switch_workspace_completed ();
-        }
-
-        public override void kill_switch_workspace () {
-            end_switch_workspace ();
-        }
 
         public override void confirm_display_change () {
+#if HAS_MUTTER44
+            unowned var monitor_manager = get_display ().get_context ().get_backend ().get_monitor_manager ();
+            var timeout = monitor_manager.get_display_configuration_timeout ();
+#else
+            var timeout = Meta.MonitorManager.get_display_configuration_timeout ();
+#endif
+            var summary = ngettext (
+                "Changes will automatically revert after %i second.",
+                "Changes will automatically revert after %i seconds.",
+                timeout
+            );
+            uint dialog_timeout_id = 0;
+
             var dialog = new AccessDialog (
                 _("Keep new display settings?"),
-                _("Changes will automatically revert after 30 seconds."),
+                summary.printf (timeout),
                 "preferences-desktop-display"
             ) {
                 accept_label = _("Keep Settings"),
@@ -433,14 +335,19 @@
             };
 
             dialog.show.connect (() => {
-                Timeout.add_seconds (30, () => {
-                    dialog.close ();
+                dialog_timeout_id = Timeout.add_seconds (timeout, () => {
+                    dialog_timeout_id = 0;
 
                     return Source.REMOVE;
                 });
             });
 
             dialog.response.connect ((res) => {
+                if (dialog_timeout_id != 0) {
+                    Source.remove (dialog_timeout_id);
+                    dialog_timeout_id = 0;
+                }
+
                 complete_display_change (res == 0);
             });
 
@@ -450,16 +357,6 @@
         public override unowned Meta.PluginInfo? plugin_info () {
             return info;
         }
-
-        static void clutter_actor_reparent (Clutter.Actor actor, Clutter.Actor new_parent) {
-            if (actor == new_parent)
-                return;
-
-            actor.ref ();
-            actor.get_parent ().remove_child (actor);
-            new_parent.add_child (actor);
-            actor.unref ();
-        }
     }
 
     [CCode (cname="clutter_x11_get_stage_window")]
