commit d76adf749d14d7401963d36a22597584c52fc55f
Author: soiamsoNG <83182235@qq.com>
Date:   Fri Dec 24 13:40:06 2021 +0800

    Bump aeson

diff --git a/heist.cabal b/heist.cabal
index 0a49488..9a6e105 100644
--- a/heist.cabal
+++ b/heist.cabal
@@ -162,7 +162,7 @@ Library
     Heist.Interpreted.Internal
 
   build-depends:
-    aeson                      >= 0.6     && < 1.6,
+    aeson                      >= 0.6     && < 3,
     attoparsec                 >= 0.10    && < 0.14,
     base                       >= 4.5     && < 4.15,
     blaze-builder              >= 0.2     && < 0.5,
@@ -186,7 +186,8 @@ Library
     transformers-base          >= 0.4     && < 0.5,
     unordered-containers       >= 0.1.4   && < 0.3,
     vector                     >= 0.9     && < 0.13,
-    xmlhtml                    >= 0.2.3.5 && < 0.3
+    xmlhtml                    >= 0.2.3.5 && < 0.3,
+    indexed-traversable
 
   if !impl(ghc >= 8.0)
     build-depends: semigroups >= 0.16 && < 0.19
@@ -251,7 +252,9 @@ Test-suite testsuite
     transformers-base,
     unordered-containers,
     vector,
-    xmlhtml
+    xmlhtml,
+    indexed-traversable
+
 
   if !impl(ghc >= 8.0)
     build-depends: semigroups >= 0.16 && < 0.19
@@ -301,7 +304,9 @@ Benchmark benchmark
     transformers-base,
     unordered-containers,
     vector,
-    xmlhtml
+    xmlhtml,
+    indexed-traversable
+
 
   if !impl(ghc >= 8.0)
     build-depends: semigroups >= 0.16 && < 0.19
diff --git a/src/Heist/Splices/Json.hs b/src/Heist/Splices/Json.hs
index bce6b50..e009b14 100644
--- a/src/Heist/Splices/Json.hs
+++ b/src/Heist/Splices/Json.hs
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP #-}
 {-# LANGUAGE BangPatterns        #-}
 {-# LANGUAGE OverloadedStrings   #-}
 {-# LANGUAGE ScopedTypeVariables #-}
@@ -11,7 +12,13 @@ import           Control.Monad.Reader
 import           Data.Aeson
 import qualified Data.ByteString.Char8       as S
 import qualified Data.ByteString.Lazy.Char8  as L
+#if MIN_VERSION_aeson(2,0,0)
+import qualified Data.Aeson.KeyMap           as KM
+import qualified Data.Aeson.Key              as K
+import qualified Data.Foldable.WithIndex     as FI
+#else
 import qualified Data.HashMap.Strict         as Map
+#endif
 import           Data.Map.Syntax
 import           Data.Maybe
 import           Data.Text                   (Text)
@@ -89,7 +96,20 @@ boolToText b = if b then "true" else "false"
 numToText :: ToJSON a => a -> Text
 numToText = T.decodeUtf8 . S.concat . L.toChunks . encode
 
+#if MIN_VERSION_aeson(2,0,0)
+------------------------------------------------------------------------------
+findExpr :: Text -> Value -> Maybe Value
+findExpr t = go (T.split (=='.') t)
+  where
+    go [] !value     = Just value
+    go (x:xs) !value = findIn value >>= go xs
+      where
+        findIn (Object obj) = KM.lookup (K.fromText x) obj
+        findIn (Array arr)  = tryReadIndex >>= \i -> arr V.!? i
+        findIn _            = Nothing
 
+        tryReadIndex = fmap fst . listToMaybe . reads . T.unpack $ x
+#else
 ------------------------------------------------------------------------------
 findExpr :: Text -> Value -> Maybe Value
 findExpr t = go (T.split (=='.') t)
@@ -102,7 +122,7 @@ findExpr t = go (T.split (=='.') t)
         findIn _            = Nothing
 
         tryReadIndex = fmap fst . listToMaybe . reads . T.unpack $ x
-
+#endif
 
 ------------------------------------------------------------------------------
 asHtml :: Monad m => Text -> m [Node]
@@ -214,6 +234,22 @@ explodeTag = ask >>= go
         "value"    ## varAttrTag v valueTag
 
 
+#if MIN_VERSION_aeson(2,0,0)
+    --------------------------------------------------------------------------
+    goObject :: KM.KeyMap Value -> ReaderT Value (HeistT n n) Template
+    goObject obj = do
+        start <- genericBindings
+        let bindings = FI.ifoldl' bindKvp start  obj
+        lift $ runChildrenWith bindings
+
+    --------------------------------------------------------------------------
+    bindKvp k bindings v =
+        let newBindings = do
+                T.append "with:" (K.toText k)    ## withValue v explodeTag
+                T.append "snippet:" (K.toText k) ## withValue v snippetTag
+                T.append "value:" (K.toText k)   ## withValue v valueTag
+        in  bindings >> newBindings
+#else
     --------------------------------------------------------------------------
     goObject obj = do
         start <- genericBindings
@@ -227,3 +263,4 @@ explodeTag = ask >>= go
                 T.append "snippet:" k ## withValue v snippetTag
                 T.append "value:" k   ## withValue v valueTag
         in  bindings >> newBindings
+#endif

