commit 648b7fbd547a5908511d285fed79aee168d98c02
Author: soiamsoNG <83182235@qq.com>
Date:   Wed Apr 6 19:16:42 2022 +0800

    lesser duplicate

diff --git a/src/Heist/Splices/Json.hs b/src/Heist/Splices/Json.hs
index e009b14..4654f6d 100644
--- a/src/Heist/Splices/Json.hs
+++ b/src/Heist/Splices/Json.hs
@@ -2,6 +2,7 @@
 {-# LANGUAGE BangPatterns        #-}
 {-# LANGUAGE OverloadedStrings   #-}
 {-# LANGUAGE ScopedTypeVariables #-}
+{-# LANGUAGE FlexibleContexts #-}
 
 module Heist.Splices.Json (
   bindJson
@@ -15,10 +16,10 @@ import qualified Data.ByteString.Lazy.Char8  as L
 #if MIN_VERSION_aeson(2,0,0)
 import qualified Data.Aeson.KeyMap           as KM
 import qualified Data.Aeson.Key              as K
-import qualified Data.Foldable.WithIndex     as FI
 #else
 import qualified Data.HashMap.Strict         as Map
 #endif
+import qualified Data.Foldable.WithIndex     as FI
 import           Data.Map.Syntax
 import           Data.Maybe
 import           Data.Text                   (Text)
@@ -96,7 +97,6 @@ boolToText b = if b then "true" else "false"
 numToText :: ToJSON a => a -> Text
 numToText = T.decodeUtf8 . S.concat . L.toChunks . encode
 
-#if MIN_VERSION_aeson(2,0,0)
 ------------------------------------------------------------------------------
 findExpr :: Text -> Value -> Maybe Value
 findExpr t = go (T.split (=='.') t)
@@ -104,25 +104,16 @@ findExpr t = go (T.split (=='.') t)
     go [] !value     = Just value
     go (x:xs) !value = findIn value >>= go xs
       where
+#if MIN_VERSION_aeson(2,0,0)
         findIn (Object obj) = KM.lookup (K.fromText x) obj
-        findIn (Array arr)  = tryReadIndex >>= \i -> arr V.!? i
-        findIn _            = Nothing
-
-        tryReadIndex = fmap fst . listToMaybe . reads . T.unpack $ x
 #else
-------------------------------------------------------------------------------
-findExpr :: Text -> Value -> Maybe Value
-findExpr t = go (T.split (=='.') t)
-  where
-    go [] !value     = Just value
-    go (x:xs) !value = findIn value >>= go xs
-      where
         findIn (Object obj) = Map.lookup x obj
+#endif
         findIn (Array arr)  = tryReadIndex >>= \i -> arr V.!? i
         findIn _            = Nothing
 
         tryReadIndex = fmap fst . listToMaybe . reads . T.unpack $ x
-#endif
+
 
 ------------------------------------------------------------------------------
 asHtml :: Monad m => Text -> m [Node]
@@ -234,33 +225,22 @@ explodeTag = ask >>= go
         "value"    ## varAttrTag v valueTag
 
 
-#if MIN_VERSION_aeson(2,0,0)
     --------------------------------------------------------------------------
-    goObject :: KM.KeyMap Value -> ReaderT Value (HeistT n n) Template
     goObject obj = do
         start <- genericBindings
         let bindings = FI.ifoldl' bindKvp start  obj
         lift $ runChildrenWith bindings
 
     --------------------------------------------------------------------------
+    
     bindKvp k bindings v =
-        let newBindings = do
-                T.append "with:" (K.toText k)    ## withValue v explodeTag
-                T.append "snippet:" (K.toText k) ## withValue v snippetTag
-                T.append "value:" (K.toText k)   ## withValue v valueTag
-        in  bindings >> newBindings
+#if MIN_VERSION_aeson(2,0,0)
+        let k' = K.toText k
 #else
-    --------------------------------------------------------------------------
-    goObject obj = do
-        start <- genericBindings
-        let bindings = Map.foldlWithKey' bindKvp start obj
-        lift $ runChildrenWith bindings
-
-    --------------------------------------------------------------------------
-    bindKvp bindings k v =
-        let newBindings = do
-                T.append "with:" k    ## withValue v explodeTag
-                T.append "snippet:" k ## withValue v snippetTag
-                T.append "value:" k   ## withValue v valueTag
-        in  bindings >> newBindings
+        let k' = k
 #endif
+            newBindings = do
+                T.append "with:" k'    ## withValue v explodeTag
+                T.append "snippet:" k' ## withValue v snippetTag
+                T.append "value:" k'   ## withValue v valueTag
+        in  bindings >> newBindings
