--- a/make/stub_includes/platform/glibc-compat-symbols.h
+++ b/make/stub_includes/platform/glibc-compat-symbols.h
@@ -15,35 +15,7 @@
  *
  * Check build-in macro definitions via 'gcc -dM -E - < /dev/null'
  */
-#if defined(__linux__) /* Actually we like to test whether we link against GLIBC .. */
-    #if defined(__GNUC__)
-        #if defined(__aarch64__)
-           #define GLIBC_COMPAT_SYMBOL(FFF) __asm__(".symver " #FFF "," #FFF "@GLIBC_2.4");
-        #elif defined(__arm__)
-           #define GLIBC_COMPAT_SYMBOL(FFF) __asm__(".symver " #FFF "," #FFF "@GLIBC_2.4");
-        #elif defined(__amd64__)
-           #define GLIBC_COMPAT_SYMBOL(FFF) __asm__(".symver " #FFF "," #FFF "@GLIBC_2.2.5");
-        #else
-           #define GLIBC_COMPAT_SYMBOL(FFF) __asm__(".symver " #FFF "," #FFF "@GLIBC_2.0");
-        #endif /*__amd64__*/
-    #elif defined(__clang__)
-        #if defined(__aarch64__)
-           #define GLIBC_COMPAT_SYMBOL(FFF) asm(".symver " #FFF "," #FFF "@GLIBC_2.4");
-        #elif defined(__arm__)
-           #define GLIBC_COMPAT_SYMBOL(FFF) asm(".symver " #FFF "," #FFF "@GLIBC_2.4");
-        #elif defined(__amd64__)
-           #define GLIBC_COMPAT_SYMBOL(FFF) asm(".symver " #FFF "," #FFF "@GLIBC_2.2.5");
-        #else
-           #define GLIBC_COMPAT_SYMBOL(FFF) asm(".symver " #FFF "," #FFF "@GLIBC_2.0");
-        #endif /*__amd64__*/
-    #else
-        #warning GLIBC_COMPAT_SYMBOL not supported with current compiler on GNU/Linux
-        #define GLIBC_COMPAT_SYMBOL(FFF)
-    #endif
-#else
-    #warning GLIBC_COMPAT_SYMBOL not supported with target OS
-    #define GLIBC_COMPAT_SYMBOL(FFF)
-#endif
+#define GLIBC_COMPAT_SYMBOL(FFF)
 
 GLIBC_COMPAT_SYMBOL(memcpy)
  
