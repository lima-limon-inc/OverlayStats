diff --git a/invoke/config.py b/invoke/config.py
index e32d27a1..0f365464 100644
--- a/invoke/config.py
+++ b/invoke/config.py
@@ -482,6 +482,7 @@ class Config(DataProxy):
                 "out_stream": None,
                 "err_stream": None,
                 "in_stream": None,
+                'capture_buffer_size': None,
                 "watchers": [],
                 "echo_stdin": None,
             },
diff --git a/invoke/runners.py b/invoke/runners.py
index d565b523..7ffc988e 100644
--- a/invoke/runners.py
+++ b/invoke/runners.py
@@ -7,6 +7,7 @@ from subprocess import Popen, PIPE
 import sys
 import threading
 import time
+from collections import deque
 
 from .util import six
 
@@ -250,6 +251,14 @@ class Runner(object):
             When not ``None``, this parameter will override that auto-detection
             and force, or disable, echoing.
 
+        :param int capture_buffer_size:
+            If set, captured stdout/stderr will be limited to the specified
+            number of characters. The last characters of stdout/stderr
+            will be returned via the ``Result`` object.
+
+            By default (when ``None``), there is no limit on the captured
+            stdout/stderr.
+
         :returns:
             `Result`, or a subclass thereof.
 
@@ -286,7 +295,7 @@ class Runner(object):
         # Arrive at final encoding if neither config nor kwargs had one
         self.encoding = opts["encoding"] or self.default_encoding()
         # Set up IO thread parameters (format - body_func: {kwargs})
-        stdout, stderr = [], []
+        stdout, stderr = deque(maxlen=opts['capture_buffer_size']), deque(maxlen=opts['capture_buffer_size'])
         thread_args = {
             self.handle_stdout: {
                 "buffer_": stdout,
@@ -437,6 +446,9 @@ class Runner(object):
         in_stream = opts["in_stream"]
         if in_stream is None:
             in_stream = sys.stdin
+        if opts['capture_buffer_size']:
+            if opts['capture_buffer_size'] < len(self.context.config.sudo.prompt):
+                 raise ValueError('capture_buffer_size is too short to match prompt')
         # Determine pty or no
         self.using_pty = self.should_use_pty(opts["pty"], opts["fallback"])
         if opts["watchers"]:
@@ -539,7 +551,7 @@ class Runner(object):
             # result after execution completes.
             # NOTE: this is threadsafe insofar as no reading occurs until after
             # the thread is join()'d.
-            buffer_.append(data)
+            buffer_.extend(data)
             # Run our specific buffer through the autoresponder framework
             self.respond(buffer_)
 
diff --git a/tests/runners.py b/tests/runners.py
index 2ac8ec22..a192cb89 100644
--- a/tests/runners.py
+++ b/tests/runners.py
@@ -145,6 +145,21 @@ class Runner_:
             assert r.stdout == "stuff"
             assert sys.stdout.getvalue() == ""
 
+    class capture_buffer_size:
+        @trap
+        def limits_capture(self):
+            runner = self._runner(out='x'*99 + 'y'*40, run={'capture_buffer_size': 40})
+            eq_(runner.run(_).stdout, 'y'*40)
+
+        @trap
+        def fails_when_too_small(self):
+            try:
+                self._runner(out='abc', run={'capture_buffer_size': 3}).run(_)
+            except ValueError as e:
+                eq_(str(e), 'capture_buffer_size is too short to match prompt')
+            else:
+                assert False, "Did not raise ValueError too small a buffer"
+
     class pty:
         def pty_defaults_to_off(self):
             assert self._run(_).pty is False
