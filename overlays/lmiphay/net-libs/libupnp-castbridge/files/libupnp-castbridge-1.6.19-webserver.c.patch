--- ./upnp/src/genlib/net/http/webserver.c	2013-11-15 16:01:35.000000000 +0000
+++ webserver.c	2015-12-25 10:53:28.674015101 +0000
@@ -783,10 +783,11 @@
 	/*! [out] SendInstruction object where the range operations will be stored. */
 	struct SendInstruction *Instr)
 {
-	off_t FirstByte, LastByte;
+	off_t FirstByte = 0, LastByte = 0;
 	char *RangeInput;
 	char *Ptr;
 	int rc = 0;
+	int RangeRC;
 
 	Instr->IsRangeActive = 1;
 	Instr->ReadSendSize = FileLength;
@@ -806,16 +807,32 @@
 	}
 	/* Jump = */
 	Ptr = Ptr + 1;
-	if (FileLength < 0) {
+	RangeRC = GetNextRange(&Ptr, &FirstByte, &LastByte);
+	if (FileLength < 0 && LastByte != -1) {
 		free(RangeInput);
 		return HTTP_REQUEST_RANGE_NOT_SATISFIABLE;
 	}
-	if (GetNextRange(&Ptr, &FirstByte, &LastByte) != -1) {
-		if (FileLength < FirstByte) {
+	if (RangeRC != -1) {
+		if (FileLength < FirstByte && FileLength > 0) {
 			free(RangeInput);
 			return HTTP_REQUEST_RANGE_NOT_SATISFIABLE;
 		}
-		if (FirstByte >= 0 && LastByte >= 0 && LastByte >= FirstByte) {
+		if (FirstByte >= 0 && LastByte == -1 && FileLength < 0) {
+			Instr->RangeOffset = FirstByte;
+			/* UPNP_INFINITE responds with a 200, no need of CONTENT-RANGE */
+			/* UPNP_UNTIL_CLOSE headers are done in http_SendMessage */
+			if (FileLength == UPNP_USING_CHUNKED) {
+				rc = snprintf(Instr->RangeHeader,
+					sizeof(Instr->RangeHeader),
+					"CONTENT-RANGE: bytes %" PRId64
+					"-" "*" "\r\n",
+					(int64_t)FirstByte);
+			}
+			if (rc < 0 || (unsigned int) rc >= sizeof(Instr->RangeHeader)) {
+				free(RangeInput);
+				return HTTP_INTERNAL_SERVER_ERROR;
+			}
+		} else if (FirstByte >= 0 && LastByte >= 0 && LastByte >= FirstByte) {
 			if (LastByte >= FileLength)
 				LastByte = FileLength - 1;
 			Instr->RangeOffset = FirstByte;
@@ -1010,6 +1027,81 @@
 }
 
 /*!
+ * \brief Build an array of unrecognized headers.
+ *
+ * \return nothing
+ */
+#define MAX_EXTRA_HEADERS 128
+static int ExtraHTTPHeaders(
+	/*! [in] HTTP Request message. */
+	http_message_t *Req,
+	struct Extra_Headers **ExtraHeaders)
+{
+	http_header_t *header;
+	ListNode *node;
+	int index, nb_extra = 0;
+	struct Extra_Headers *extra_headers;
+
+	node = ListHead(&Req->headers);
+	extra_headers = *ExtraHeaders =
+		(struct Extra_Headers*) malloc(MAX_EXTRA_HEADERS * sizeof(struct Extra_Headers));
+	if (!extra_headers) {
+		return HTTP_INTERNAL_SERVER_ERROR;
+	}
+	while (node != NULL) {
+		header = (http_header_t *) node->item;
+		/* find header type. */
+		index = map_str_to_int((const char *)header->name.buf,
+				header->name.length, Http_Header_Names,
+				NUM_HTTP_HEADER_NAMES, FALSE);
+		if (index < 0) {
+			extra_headers->name = (char *)malloc(header->name.length + 1);
+			extra_headers->value = (char *)malloc(header->value.length + 1);
+			if (!extra_headers->name || !extra_headers->value) {
+				/* cleanup will be made by caller */
+				return HTTP_INTERNAL_SERVER_ERROR;
+			}
+			memcpy(extra_headers->name, header->name.buf, header->name.length);
+			memcpy(extra_headers->value, header->value.buf, header->value.length);
+			extra_headers->name[header->name.length] = '\0';
+			extra_headers->value[header->value.length] = '\0';
+			extra_headers->resp = NULL;
+
+			extra_headers++;
+			nb_extra++;
+
+			if (nb_extra == MAX_EXTRA_HEADERS - 1) {
+				break;
+			}
+		}
+		node = ListNext(&Req->headers, node);
+	}
+	extra_headers->name = extra_headers->value = extra_headers->resp = NULL;
+	return HTTP_OK;
+}
+
+static void FreeExtraHTTPHeaders(
+	/*! [in] extra HTTP headers to free. */
+	struct Extra_Headers *ExtraHeaders)
+{
+	struct Extra_Headers *extra_headers = ExtraHeaders;
+
+	if (!ExtraHeaders) {
+		return;
+	}
+
+	while (extra_headers->name) {
+		free(extra_headers->name);
+		if (extra_headers->value) free(extra_headers->value);
+		if (extra_headers->resp) ixmlFreeDOMString(extra_headers->resp);
+		extra_headers++;
+	}
+
+	free(ExtraHeaders);
+}
+
+
+/*!
  * \brief Processes the request and returns the result in the output parameters.
  *
  * \return
@@ -1048,7 +1140,7 @@
 	int resp_minor;
 	int alias_grabbed;
 	size_t dummy;
-	const char *extra_headers = NULL;
+	struct Extra_Headers *extra_headers = NULL;
 
 	print_http_headers(req);
 	url = &req->uri;
@@ -1112,7 +1204,12 @@
 	}
 	if (using_virtual_dir) {
 		if (req->method != HTTPMETHOD_POST) {
+			if ((code = ExtraHTTPHeaders(req, &extra_headers)) != HTTP_OK) {
+				err_code = code;
+				goto error_handler;
+			}
 			/* get file info */
+			finfo.extra_headers = extra_headers;
 			if (virtualDirCallback.
 			    get_info(filename->buf, &finfo) != 0) {
 				err_code = HTTP_NOT_FOUND;
@@ -1206,23 +1303,20 @@
 	RespInstr->ReadSendSize = finfo.file_length;
 	/* Check other header field. */
 	if ((code =
-	     CheckOtherHTTPHeaders(req, RespInstr,
+		 CheckOtherHTTPHeaders(req, RespInstr,
 				   finfo.file_length)) != HTTP_OK) {
 		err_code = code;
 		goto error_handler;
 	}
+
 	if (req->method == HTTPMETHOD_POST) {
 		*rtype = RESP_POST;
 		err_code = HTTP_OK;
 		goto error_handler;
 	}
-	/*extra_headers = UpnpFileInfo_get_ExtraHeaders(finfo); */
-	if (!extra_headers) {
-		extra_headers = "";
-	}
 
 	/* Check if chunked encoding should be used. */
-	if (using_virtual_dir && finfo.file_length == UPNP_USING_CHUNKED) {
+	if (using_virtual_dir && (finfo.file_length == UPNP_USING_CHUNKED || finfo.file_length == UPNP_USING_CHUNKED_200)) {
 		/* Chunked encoding is only supported by HTTP 1.1 clients */
 		if (resp_major == 1 && resp_minor == 1) {
 			RespInstr->IsChunkActive = 1;
@@ -1236,70 +1330,112 @@
 	}
 
 	if (RespInstr->IsRangeActive && RespInstr->IsChunkActive) {
-		/* Content-Range: bytes 222-3333/4000  HTTP_PARTIAL_CONTENT */
-		/* Transfer-Encoding: chunked */
+		if (finfo.file_length == UPNP_USING_CHUNKED) {
+			/* Content-Range: bytes 222-*  HTTP_PARTIAL_CONTENT */
+			/* Transfer-Encoding: chunked */
+			if (http_MakeMessage(headers, resp_major, resp_minor,
+				"R" "T" "GKLD" "s" "tcS" "Xc" "ECc",
+				HTTP_PARTIAL_CONTENT,	/* status code */
+				finfo.content_type,	/* content type */
+				RespInstr,	/* range info */
+				RespInstr,	/* language info */
+				"LAST-MODIFIED: ",
+				&finfo.last_modified,
+				X_USER_AGENT, extra_headers) != 0) {
+				goto error_handler;
+			}
+		} else if (finfo.file_length == UPNP_USING_CHUNKED_200) {
+			/* Content-Range: bytes 222-  HTTP_OK */
+			/* Transfer-Encoding: chunked */
+			if (http_MakeMessage(headers, resp_major, resp_minor,
+				"R" "T" "KLD" "s" "tcS" "Xc" "ECc",
+				HTTP_OK,	/* status code */
+				finfo.content_type,	/* content type */
+				RespInstr,	/* language info */
+				"LAST-MODIFIED: ",
+				&finfo.last_modified,
+				X_USER_AGENT, extra_headers) != 0) {
+				goto error_handler;
+			}
+		}
+	} else if (RespInstr->IsRangeActive && !RespInstr->IsChunkActive && finfo.file_length == UPNP_UNTIL_CLOSE) {
+		/* Content-Range:  will be added later by http_SendMessage */
+		/* Content-length: (same) */
+		/* warning : trailing CRLF *must* be added by http_SendMessage */
 		if (http_MakeMessage(headers, resp_major, resp_minor,
-		    "R" "T" "GKLD" "s" "tcS" "Xc" "sCc",
-		    HTTP_PARTIAL_CONTENT,	/* status code */
-		    finfo.content_type,	/* content type */
-		    RespInstr,	/* range info */
-		    RespInstr,	/* language info */
-		    "LAST-MODIFIED: ",
-		    &finfo.last_modified,
-		    X_USER_AGENT, extra_headers) != 0) {
+			"R" "T" "LD" "s" "tcS" "Xc" "EC",
+			HTTP_PARTIAL_CONTENT,	/* status code */
+			finfo.content_type,	/* content type */
+			RespInstr,	/* language info */
+			"LAST-MODIFIED: ",
+			&finfo.last_modified,
+			X_USER_AGENT, extra_headers) != 0) {
+			goto error_handler;
+		}
+	} else if (RespInstr->IsRangeActive && !RespInstr->IsChunkActive && finfo.file_length == UPNP_INFINITE) {
+		/* Content-Range: serve origin seek but respond with HTTP_OK  */
+		/* Content-length: not indicated  */
+		if (http_MakeMessage(headers, resp_major, resp_minor,
+			"R" "TLD" "s" "tcS" "Xc" "ECc",
+			HTTP_OK,	/* status code */
+			finfo.content_type,	/* content type */
+			RespInstr,	/* language info */
+			"LAST-MODIFIED: ",
+			&finfo.last_modified,
+			X_USER_AGENT, extra_headers) != 0) {
 			goto error_handler;
 		}
 	} else if (RespInstr->IsRangeActive && !RespInstr->IsChunkActive) {
 		/* Content-Range: bytes 222-3333/4000  HTTP_PARTIAL_CONTENT */
 		if (http_MakeMessage(headers, resp_major, resp_minor,
-		    "R" "N" "T" "GLD" "s" "tcS" "Xc" "sCc",
-		    HTTP_PARTIAL_CONTENT,	/* status code */
-		    RespInstr->ReadSendSize,	/* content length */
-		    finfo.content_type,	/* content type */
-		    RespInstr,	/* range info */
-		    RespInstr,	/* language info */
-		    "LAST-MODIFIED: ",
-		    &finfo.last_modified,
-		    X_USER_AGENT, extra_headers) != 0) {
+			"R" "N" "T" "GLD" "s" "tcS" "Xc" "ECc",
+			HTTP_PARTIAL_CONTENT,	/* status code */
+			RespInstr->ReadSendSize,	/* content length */
+			finfo.content_type,	/* content type */
+			RespInstr,	/* range info */
+			RespInstr,	/* language info */
+			"LAST-MODIFIED: ",
+			&finfo.last_modified,
+			X_USER_AGENT, extra_headers) != 0) {
 			goto error_handler;
 		}
 	} else if (!RespInstr->IsRangeActive && RespInstr->IsChunkActive) {
 		/* Transfer-Encoding: chunked */
 		if (http_MakeMessage(headers, resp_major, resp_minor,
-		    "RK" "TLD" "s" "tcS" "Xc" "sCc",
-		    HTTP_OK,	/* status code */
-		    finfo.content_type,	/* content type */
-		    RespInstr,	/* language info */
-		    "LAST-MODIFIED: ",
-		    &finfo.last_modified,
-		    X_USER_AGENT, extra_headers) != 0) {
+			"RK" "TLD" "s" "tcS" "Xc" "ECc",
+			HTTP_OK,	/* status code */
+			finfo.content_type,	/* content type */
+			RespInstr,	/* language info */
+			"LAST-MODIFIED: ",
+			&finfo.last_modified,
+			X_USER_AGENT, extra_headers) != 0) {
 			goto error_handler;
 		}
 	} else {
 		/* !RespInstr->IsRangeActive && !RespInstr->IsChunkActive */
 		if (RespInstr->ReadSendSize >= 0) {
 			if (http_MakeMessage(headers, resp_major, resp_minor,
-			    "R" "N" "TLD" "s" "tcS" "Xc" "sCc",
-			    HTTP_OK,	/* status code */
-			    RespInstr->ReadSendSize,	/* content length */
-			    finfo.content_type,	/* content type */
-			    RespInstr,	/* language info */
-			    "LAST-MODIFIED: ",
-			    &finfo.last_modified,
-			    X_USER_AGENT,
-			    extra_headers) != 0) {
+				"R" "N" "TLD" "s" "tcS" "Xc" "ECc",
+				HTTP_OK,	/* status code */
+				RespInstr->ReadSendSize,	/* content length */
+				finfo.content_type,	/* content type */
+				RespInstr,	/* language info */
+				"LAST-MODIFIED: ",
+				&finfo.last_modified,
+				X_USER_AGENT,
+				extra_headers) != 0) {
 				goto error_handler;
 			}
 		} else {
 			if (http_MakeMessage(headers, resp_major, resp_minor,
-			    "R" "TLD" "s" "tcS" "Xc" "sCc",
-			    HTTP_OK,	/* status code */
-			    finfo.content_type,	/* content type */
-			    RespInstr,	/* language info */
-			    "LAST-MODIFIED: ",
-			    &finfo.last_modified,
-			    X_USER_AGENT,
-			    extra_headers) != 0) {
+				"R" "TLD" "s" "tcS" "Xc" "ECc",
+				HTTP_OK,	/* status code */
+				finfo.content_type,	/* content type */
+				RespInstr,	/* language info */
+				"LAST-MODIFIED: ",
+				&finfo.last_modified,
+				X_USER_AGENT,
+				extra_headers) != 0) {
 				goto error_handler;
 			}
 		}
@@ -1324,6 +1460,7 @@
 
  error_handler:
 	free(request_doc);
+	FreeExtraHTTPHeaders(extra_headers);
 	ixmlFreeDOMString(finfo.content_type);
 	if (err_code != HTTP_OK && alias_grabbed) {
 		alias_release(alias);
@@ -1513,15 +1650,31 @@
 				&RespInstr,
 				headers.buf, headers.length,
 				filename.buf);*/
-			http_SendMessage(info, &timeout, "Ibf",
-				&RespInstr,
-				headers.buf, headers.length,
-				filename.buf);
+			if (RespInstr.IsRangeActive && RespInstr.ReadSendSize == UPNP_UNTIL_CLOSE) {
+				http_SendMessage(info, &timeout, "Ip",
+					&RespInstr,
+					&headers,
+					filename.buf);
+			}
+			else {
+				http_SendMessage(info, &timeout, "Ibf",
+					&RespInstr,
+					headers.buf, headers.length,
+					filename.buf);
+			}
 			break;
 		case RESP_HEADERS:
 			/* headers only */
-			http_SendMessage(info, &timeout, "b",
-				headers.buf, headers.length);
+			if (RespInstr.IsRangeActive && RespInstr.ReadSendSize == UPNP_UNTIL_CLOSE) {
+				http_SendMessage(info, &timeout, "Ih",
+					&RespInstr,
+					&headers,
+					filename.buf);
+			}
+			else {
+				http_SendMessage(info, &timeout, "b",
+					headers.buf, headers.length);
+			}
 			break;
 		case RESP_POST:
 			/* headers only */
