#!/bin/sh

set -e
[ -n "$DEBUG" ] && set -x

if [ "$1" = "-h" ]; then
    printf "usage: %s [-e] NEW_VERSION\n" "$(basename "$0")"
    exit 1
fi

edit=
if [ "$1" = "-e" ]; then
    edit=1
    shift
fi

log() {
    printf "$(tput setaf 6)[${pkgname}]$(tput sgr0) %s\n" "$@"
}

cleanup() {
    [ -n "${done}" ] && return
    log "cleaning up ${newebuild}"
    mv "${newebuild}" "${newebuild}.rej"
}

done=
trap '{ cleanup; }' EXIT

newversion="${1:?missing new version}"
pkgname="$(basename "$(dirname "${PWD}")")"/"$(basename "${PWD}")"

oldebuild=$(find . -type f -name \*.ebuild -print | sort | head -n1)
oldversion=$(printf "%s" "${oldebuild}" | rev | cut -d"-" -f1 | cut -d"." -f2- | rev)
newebuild=$(printf "%s" "${oldebuild}" | sed -e "s/${oldversion}/${newversion}/")

log "new ebuild ${newversion}"
cp -v "${oldebuild}" "${newebuild}"
[ -n "${edit}" ] && exec "${EDITOR}" "${newebuild}"

olderebuilds=$(find . -type f -name \*.ebuild -print | sort | grep -v "${newebuild}")
num_olderebuilds=$(printf "%s" "${olderebuilds}" | wc -l)
droppedebuilds=""
if [ "${num_olderebuilds}" -gt 0 ]; then
    log "there is ${num_olderebuilds} ebuilds, you should drop some..."
    for eb in ${olderebuilds}; do
        printf "drop %s ? (y/n) " "${eb}"
        read -r yn
        if [ "$yn" = "y" ]; then
            droppedebuilds="${droppedebuilds}${eb} "
            rm "$eb"
        fi
    done
fi

log "updating manifest"
doas ebuild "${newebuild}" manifest

log "creating commit"
if [ -n "$(git diff --staged --name-only)" ]; then
    log "error: staging not clear"
    git status -s --untracked-files=no
    exit 1
fi

set -x
git add "${newebuild}"
git add Manifest 2>/dev/null || true
[ -n "${droppedebuilds}" ] && git add ${droppedebuilds}
git commit -m "${pkgname}: bump to ${newversion}" || git reset . >/dev/null

done=1
log "done"
