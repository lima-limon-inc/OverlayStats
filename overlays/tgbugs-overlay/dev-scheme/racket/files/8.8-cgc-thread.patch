--- src/bc/src/schpriv.h
+++ src/bc/src/schpriv.h
@@ -172,12 +172,8 @@ XFORM_NONGCING int scheme_intern_prim_opt_flags(int);
 #define MALLOC_N_STUBBORN(x, n) _MALLOC_N(x, n, scheme_malloc_stubborn)
 
 #ifdef MZ_PRECISE_GC
-# define WEAKIFY(x) scheme_make_weak_box(x)
-# define WEAKIFIED(x) SCHEME_WEAK_BOX_VAL(x)
 # define HT_EXTRACT_WEAK(x) SCHEME_WEAK_BOX_VAL(x)
 #else
-# define WEAKIFY(x) x
-# define WEAKIFIED(x) x
 # define HT_EXTRACT_WEAK(x) (*(char **)(x))
 #endif
 
@@ -911,7 +907,7 @@ void scheme_run_atexit_closers(Scheme_Object *o, Scheme_Close_Custodian_Client *
 
 typedef struct Scheme_Thread_Custodian_Hop {
   Scheme_Object so;
-  Scheme_Thread *p; /* really an indirection with precise gc */
+  Scheme_Object *p; /* weak box containing a Scheme_Thread* */
   Scheme_Custodian_Reference *mref;
   Scheme_Object *extra_mrefs; /* More owning custodians */
   Scheme_Object *dead_box;
--- src/bc/src/stypes.h
+++ src/bc/src/stypes.h
@@ -224,52 +224,52 @@ enum {
   scheme_will_be_lambda_type,           /* 187 */
   scheme_thunk_for_continue_type,       /* 188 */
   scheme_stencil_vector_type,           /* 189 */
+  scheme_thread_hop_type,               /* 190 */
   
 #ifdef MZTAG_REQUIRED                            
-  _scheme_last_normal_type_,            /* 190 */
+  _scheme_last_normal_type_,            /* 191 */
 
   /* The remaining tags exist for GC tracing (in non-conservative
      mode), but they are not needed for run-time tag tests */
                                                  
-  scheme_rt_weak_array,                 /* 191 */
+  scheme_rt_weak_array,                 /* 192 */
                                         
-  scheme_rt_comp_env,                   /* 192 */
-  scheme_rt_constant_binding,           /* 193 */
-  scheme_rt_resolve_info,               /* 194 */
-  scheme_rt_unresolve_info,             /* 195 */
-  scheme_rt_optimize_info,              /* 196 */
-  scheme_rt_cont_mark,                  /* 197 */
-  scheme_rt_saved_stack,                /* 198 */
-  scheme_rt_reply_item,                 /* 199 */
-  scheme_rt_ir_lambda_info,             /* 200 */
-  scheme_rt_overflow,                   /* 201 */
-  scheme_rt_overflow_jmp,               /* 202 */
-  scheme_rt_meta_cont,                  /* 203 */
-  scheme_rt_dyn_wind_cell,              /* 204 */
-  scheme_rt_dyn_wind_info,              /* 205 */
-  scheme_rt_dyn_wind,                   /* 206 */
-  scheme_rt_dup_check,                  /* 207 */
-  scheme_rt_thread_memory,              /* 208 */
-  scheme_rt_input_file,                 /* 209 */
-  scheme_rt_input_fd,                   /* 210 */
-  scheme_rt_oskit_console_input,        /* 211 */
-  scheme_rt_tested_input_file,          /* 212 */
-  scheme_rt_tested_output_file,         /* 213 */
-  scheme_rt_indexed_string,             /* 214 */
-  scheme_rt_output_file,                /* 215 */
-  scheme_rt_pipe,                       /* 216 */
-  scheme_rt_system_child,               /* 217 */
-  scheme_rt_tcp,                        /* 218 */
-  scheme_rt_write_data,                 /* 219 */
-  scheme_rt_tcp_select_info,            /* 220 */
-  scheme_rt_param_data,                 /* 221 */
-  scheme_rt_will,                       /* 222 */
-  scheme_rt_finalization,               /* 223 */
-  scheme_rt_finalizations,              /* 224 */
-  scheme_rt_cpp_object,                 /* 225 */
-  scheme_rt_cpp_array_object,           /* 226 */
-  scheme_rt_stack_object,               /* 227 */
-  scheme_thread_hop_type,               /* 228 */
+  scheme_rt_comp_env,                   /* 193 */
+  scheme_rt_constant_binding,           /* 194 */
+  scheme_rt_resolve_info,               /* 195 */
+  scheme_rt_unresolve_info,             /* 196 */
+  scheme_rt_optimize_info,              /* 197 */
+  scheme_rt_cont_mark,                  /* 198 */
+  scheme_rt_saved_stack,                /* 199 */
+  scheme_rt_reply_item,                 /* 200 */
+  scheme_rt_ir_lambda_info,             /* 201 */
+  scheme_rt_overflow,                   /* 202 */
+  scheme_rt_overflow_jmp,               /* 203 */
+  scheme_rt_meta_cont,                  /* 204 */
+  scheme_rt_dyn_wind_cell,              /* 205 */
+  scheme_rt_dyn_wind_info,              /* 206 */
+  scheme_rt_dyn_wind,                   /* 207 */
+  scheme_rt_dup_check,                  /* 208 */
+  scheme_rt_thread_memory,              /* 209 */
+  scheme_rt_input_file,                 /* 210 */
+  scheme_rt_input_fd,                   /* 211 */
+  scheme_rt_oskit_console_input,        /* 212 */
+  scheme_rt_tested_input_file,          /* 213 */
+  scheme_rt_tested_output_file,         /* 214 */
+  scheme_rt_indexed_string,             /* 215 */
+  scheme_rt_output_file,                /* 216 */
+  scheme_rt_pipe,                       /* 217 */
+  scheme_rt_system_child,               /* 218 */
+  scheme_rt_tcp,                        /* 219 */
+  scheme_rt_write_data,                 /* 220 */
+  scheme_rt_tcp_select_info,            /* 221 */
+  scheme_rt_param_data,                 /* 222 */
+  scheme_rt_will,                       /* 223 */
+  scheme_rt_finalization,               /* 224 */
+  scheme_rt_finalizations,              /* 225 */
+  scheme_rt_cpp_object,                 /* 226 */
+  scheme_rt_cpp_array_object,           /* 227 */
+  scheme_rt_stack_object,               /* 228 */
   scheme_rt_srcloc,                     /* 229 */
   scheme_rt_evt,                        /* 230 */
   scheme_rt_syncing,                    /* 231 */
--- src/bc/src/thread.c
+++ src/bc/src/thread.c
@@ -468,10 +468,6 @@ SHARED_OK static Scheme_Custodian_Extractor *extractors;
 #define LONGJMP(p) scheme_longjmpup(&p->jmpup_buf)
 #define RESETJMP(p) scheme_reset_jmpup_buf(&p->jmpup_buf)
 
-#ifndef MZ_PRECISE_GC
-# define scheme_thread_hop_type scheme_thread_type
-#endif
-
 SHARED_OK Scheme_Object *initial_cmdline_vec;
 
 #if defined(MZ_USE_PLACES)
@@ -1164,7 +1160,7 @@ static void adjust_custodian_family(void *mgr, void *skip_move)
 	    Scheme_Object *o;
 	    o = xCUSTODIAN_FAM(r->boxes[i]);
 	    if (SAME_TYPE(SCHEME_TYPE(o), scheme_thread_hop_type)) {
-	      o = WEAKIFIED(((Scheme_Thread_Custodian_Hop *)o)->p);
+	      o = SCHEME_WEAK_BOX_VAL(((Scheme_Thread_Custodian_Hop *)o)->p);
 	      if (o)
 		GC_register_thread(o, parent);
 	    } else if (SAME_TYPE(SCHEME_TYPE(o), scheme_place_type)) {
@@ -1498,7 +1494,7 @@ Scheme_Thread *scheme_do_close_managed(Scheme_Custodian *m, Scheme_Exit_Closer_F
 	  /* We've added an indirection and made it weak. See mr_hop note above. */
 	  is_thread = 1;
           the_thread_hop = (Scheme_Thread_Custodian_Hop *)o;
-	  the_thread = (Scheme_Thread *)WEAKIFIED(the_thread_hop->p);
+	  the_thread = (Scheme_Thread *)SCHEME_WEAK_BOX_VAL(the_thread_hop->p);
 	} else {
 	  is_thread = 0;
 	  the_thread = NULL;
@@ -1708,7 +1704,7 @@ int scheme_custodian_is_shut_down(Scheme_Custodian* c)
 
 static Scheme_Object *extract_thread(Scheme_Object *o)
 {
-  return (Scheme_Object *)WEAKIFIED(((Scheme_Thread_Custodian_Hop *)o)->p);
+  return SCHEME_WEAK_BOX_VAL(((Scheme_Thread_Custodian_Hop *)o)->p);
 }
 
 void scheme_init_custodian_extractors()
@@ -2687,12 +2683,12 @@ static Scheme_Thread *make_thread(Scheme_Config *config,
   {
     Scheme_Thread_Custodian_Hop *hop;
     Scheme_Custodian_Reference *mref;
-    hop = MALLOC_ONE_WEAK_RT(Scheme_Thread_Custodian_Hop);
+    hop = MALLOC_ONE_RT(Scheme_Thread_Custodian_Hop);
     process->mr_hop = hop;
     hop->so.type = scheme_thread_hop_type;
     {
-      Scheme_Thread *wp;
-      wp = (Scheme_Thread *)WEAKIFY((Scheme_Object *)process);
+      Scheme_Object *wp;
+      wp = scheme_make_weak_box((Scheme_Object *)process);
       hop->p = wp;
     }
 
@@ -2700,10 +2696,6 @@ static Scheme_Thread *make_thread(Scheme_Config *config,
     process->mr_hop->mref = mref;
     process->mr_hop->extra_mrefs = scheme_null;
     process->mr_hop->dead_box = NULL;
-
-#ifndef MZ_PRECISE_GC
-    scheme_weak_reference((void **)(void *)&hop->p);
-#endif
   }
 
   return process;
@@ -3841,21 +3833,18 @@ Scheme_Object *scheme_call_as_nested_thread(int argc, Scheme_Object *argv[], voi
   {
     Scheme_Thread_Custodian_Hop *hop;
     Scheme_Custodian_Reference *mref;
-    hop = MALLOC_ONE_WEAK_RT(Scheme_Thread_Custodian_Hop);
+    hop = MALLOC_ONE_RT(Scheme_Thread_Custodian_Hop);
     np->mr_hop = hop;
     hop->so.type = scheme_thread_hop_type;
     {
-      Scheme_Thread *wp;
-      wp = (Scheme_Thread *)WEAKIFY((Scheme_Object *)np);
+      Scheme_Object *wp;
+      wp = scheme_make_weak_box((Scheme_Object *)np);
       hop->p = wp;
     }
     mref = scheme_add_managed(mgr, (Scheme_Object *)hop, NULL, NULL, 0);
     np->mr_hop->mref = mref;
     np->mr_hop->extra_mrefs = scheme_null;
     np->mr_hop->dead_box = NULL;
-#ifndef MZ_PRECISE_GC
-    scheme_weak_reference((void **)(void *)&hop->p);
-#endif
   }
 
   np->gc_prep_chain = gc_prep_thread_chain;
@@ -3901,11 +3890,7 @@ Scheme_Object *scheme_call_as_nested_thread(int argc, Scheme_Object *argv[], voi
     }
   }
   np->mr_hop->extra_mrefs = scheme_null;
-#ifdef MZ_PRECISE_GC
-  WEAKIFIED(np->mr_hop->p) = NULL;
-#else
-  scheme_unweak_reference((void **)(void *)&np->mr_hop->p);
-#endif
+  SCHEME_WEAK_BOX_VAL(np->mr_hop->p) = NULL;
   scheme_remove_all_finalization(np->mr_hop);
 
   if (np->prev)
